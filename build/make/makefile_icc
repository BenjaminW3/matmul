# Compilers
CC		= icc
#NVCC	= nvcc

include makefile_incl

# Flags
COPTFLAGS	= 
	# -opt-report[n] n=0(none),1(min),2(med),3(max)
	# -vec-report[n] n=0 no diagnostic information, n=1 indicate vectorized loops (DEFAULT), n=2 indicate vectorized/non-vectorized loops, n=3 indicate vectorized/non-vectorized loops and prohibiting data dependence information, n=4 indicate non-vectorized loops, n=5 indicate non-vectorized loops and prohibiting data dependence information
	# -parallel: auto parallelization; -par-threshold[n] set loop count threshold; -par-report{0|1|2|3} control the auto-parallelizer diagnostic level. This automatically sets -matmul if -O3 is defined!
	# -guide[n]: n=[1-4] gives optimization guidelines
CFLAGS		= $(COMMONFLAGS) $(COPTFLAGS) -m64 -xSSE4.2 -std=c99 -Wall -pedantic -fopenmp -ansi-alias -fargument-noalias -fargument-noalias-global -mkl=parallel #-ipo
#NVCCFLAGS	= $(COMMONFLAGS) -m64 -arch=sm_35 --compiler-options "$(COPTFLAGS) -Wall -fopenmp"

# Print help message
help:
	@echo
	@echo "  To compile, choose one of the following:"
	@echo
	@echo "    make matmul"
	@echo "		builds the tests defined in config.h"
#	@echo "    make matmulcu"
#	@echo "		builds the tests defined in config.h with support for the CUDA tests"
	@echo "    make matmulmpi"
	@echo "		builds the tests defined in config.h with support for the MPI tests"
#	@echo "    make matmulmpicu"
#	@echo "		builds the tests defined in config.h with support for the MPI and CUDA tests"
	@echo "    make matmulphi"
	@echo "		builds the tests defined in config.h with support for the Xeon Phi offloading tests"
	@echo
	@echo "  To clean use:"
	@echo
	@echo "    make clean"
	@echo

clean:
	rm -rf *o $(TARGET) $(TARGETCU) $(TARGETMPI) $(TARGETPHI)

%.c.o: $(INCLUDES)
%.c.o: $(SOURCEDIR)%.c
	$(CC) $(CFLAGS) $(ADDITIONAL_COMPILER_OPTIONS) -c $< -o $@

#%.cu.o: $(INCLUDES)
#%.cu.o: $(INCLUDESCU)
#%.cu.o: $(SOURCEDIR)%.cu
#	$(NVCC) $(NVCCFLAGS) -c $< -o $@

$(TARGET): makefile_incl
$(TARGET): makefile_icc
$(TARGET): $(OBJ)
	@echo "Link '$@':"
	$(LINK) $(OBJ) $(LIBS) -o $@ $(CFLAGS)

#$(TARGETCU): makefile_incl
#$(TARGETCU): makefile_icc
#$(TARGETCU): $(OBJ)
#$(TARGETCU): $(OBJCU)
#	@echo "Link '$@':"
#	$(LINK) $(OBJ) $(OBJCU) $(LIBS) $(LIBSCU) -o $@ $(CFLAGS)

$(TARGETMPI): ADDITIONAL_COMPILER_OPTIONS = $(shell mpicc --showme:compile)
$(TARGETMPI): INCLUDES := INCLUDESMPI
$(TARGETMPI): makefile_incl
$(TARGETMPI): makefile_icc
$(TARGETMPI): $(OBJ)
$(TARGETMPI): $(OBJMPI)
	@echo "Link '$@':"
	$(LINK) $(OBJ) $(OBJMPI) $(LIBS) $(shell mpicc --showme:link) -o $@ $(CFLAGS)

#$(TARGETMPICU): ADDITIONAL_COMPILER_OPTIONS = $(shell mpicc --showme:compile)
#$(TARGETMPICU): INCLUDES := INCLUDESMPI
#$(TARGETMPICU): makefile_incl
#$(TARGETMPICU): makefile_icc
#$(TARGETMPICU): $(OBJ)
#$(TARGETMPICU): $(OBJMPI)
#$(TARGETMPICU): $(OBJCU)
#	@echo "Link '$@':"
#	$(LINK) $(OBJ) $(OBJMPI) $(OBJCU) $(LIBS) $(LIBSCU) $(shell mpicc --showme:link) -o $@ $(CFLAGS)

$(TARGETPHI): INCLUDES := INCLUDESPHI
$(TARGETPHI): makefile_incl
$(TARGETPHI): makefile_icc
$(TARGETPHI): $(OBJ)
$(TARGETPHI): $(OBJPHI)
	@echo "Link '$@':"
	$(LINK) $(OBJ) $(OBJPHI) $(LIBS) -o $@ $(CFLAGS)
